#!/usr/bin/env bash

set -eu

PARENT=$(dirname "$0")

DISK=""
EFI_PARTITION=""
ROOT_PARTITION=""

show_help() {
	echo "Usage: $0 [options]"
	echo "Options:"
	echo "  --initialize <DISK> Initialize the disk (warning: this will erase all data on <DISK>)"
	echo "  --efi <PARTITION>   Specify the EFI partition (e.g. /dev/sda1)"
	echo "  --root <PARTITION>  Specify the root partition (e.g. /dev/sda2)"
	echo "  --help              Show this help message"
}

get_partition_suffix() {
	local disk=$1
	if [[ $disk =~ ^/dev/(nvme|mmcblk) ]]; then
		echo "p"
	else
		echo ""
	fi
}

error_arg_required() {
	echo "Error: Argument required for $1"
	show_help
	exit 1
}

# Parse arguments
while [[ $# -gt 0 ]]; do
	arg="$1"
	case $arg in
	--initialize)
		[[ -z ${2:-} ]] && error_arg_required "$arg"
		DISK="$2"
		shift 2
		;;
	--efi)
		[[ -z ${2:-} ]] && error_arg_required "$arg"
		EFI_PARTITION="$2"
		shift 2
		;;
	--root)
		[[ -z ${2:-} ]] && error_arg_required "$arg"
		ROOT_PARTITION="$2"
		shift 2
		;;
	--help)
		show_help
		exit 0
		;;
	*)
		echo "Unknown option: $arg"
		show_help
		exit 1
		;;
	esac
done

# Validate arguments
if [[ $DISK == "" && $EFI_PARTITION == "" && $ROOT_PARTITION == "" ]]; then
	echo "Error: At least one of --initialize, --efi, or --root must be specified."
	show_help
	exit 1
elif [[ $DISK != "" && ($EFI_PARTITION != "" || $ROOT_PARTITION != "") ]]; then
	echo "Error: --initialize cannot be used with --efi or --root."
	show_help
	exit 1
elif [[ $DISK == "" && ($EFI_PARTITION == "" || $ROOT_PARTITION == "") ]]; then
	echo "Error: Both --efi and --root must be specified if --initialize is not used."
	show_help
	exit 1
fi

# Initialize disk if requested
if [[ $DISK != "" ]]; then
	echo "Warning: This script will overwrite all data on $DISK"
	read -p "Are you sure you want to continue? (y/N): " CONFIRM
	if [[ "$CONFIRM" != "y" ]]; then
		echo "Operation canceled."
		exit 1
	fi

	suffix=$(get_partition_suffix "$DISK")

	sgdisk --zap-all $DISK
	sgdisk --new=1:2048:+1G --typecode=1:ef00 "$DISK"
	sgdisk --new=2:0:0 --typecode=2:8304 "$DISK"

	mkfs.fat -F 32 "${DISK}${suffix}1"
	mkfs.ext4 "${DISK}${suffix}2"

	EFI_PARTITION=${DISK}${suffix}1
	ROOT_PARTITION=${DISK}${suffix}2
fi

# Mount partitions
MOUNT_POINT="/mnt"
mount "$ROOT_PARTITION" "$MOUNT_POINT"
mkdir -p "$MOUNT_POINT/boot"
mount "$EFI_PARTITION" "$MOUNT_POINT/boot"

# Install essential packages
pacstrap -K "$MOUNT_POINT" base linux linux-firmware

# Generate fstab
genfstab -U "$MOUNT_POINT" >>/mnt/etc/fstab

# Copy this script to the new system if it has another script
if [[ -d "$PARENT/.git" ]]; then
	mkdir -p "$MOUNT_POINT/arch-setup"
	cp -r "$PARENT" "$MOUNT_POINT/arch-setup"
fi

arch-chroot "$MOUNT_POINT"
